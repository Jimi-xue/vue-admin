{"remainingRequest":"/opt/vueproject/frontend/node_modules/_babel-loader@8.2.2@babel-loader/lib/index.js!/opt/vueproject/frontend/node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js??ref--0-0!/opt/vueproject/frontend/node_modules/_vue-loader@15.9.7@vue-loader/lib/index.js??vue-loader-options!/opt/vueproject/frontend/src/components/Tinymce/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/opt/vueproject/frontend/src/components/Tinymce/index.vue","mtime":1623986732370},{"path":"/opt/vueproject/frontend/node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/opt/vueproject/frontend/node_modules/_babel-loader@8.2.2@babel-loader/lib/index.js","mtime":315532800000},{"path":"/opt/vueproject/frontend/node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/opt/vueproject/frontend/node_modules/_vue-loader@15.9.7@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}